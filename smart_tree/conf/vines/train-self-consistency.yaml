wandb:
  project: tree
  entity: harry1576
  mode: online

fp16: True
num_epoch: 500
lr_decay: True
lr: 0.01
early_stop_epoch: 20
early_stop: True
capture_output: 1

loss_mask_probability: 0.99

batch_size: 16
directory: /local/synthetic-vine-pcds-3-rotated
json_path: /local/smart-tree/smart_tree/conf/vines/vine-split.json
voxel_size: 0.005
input_feature_names : ['xyz']
target_feature_names: ['class_l']

cmap:
    - [1.0, 0.0, 0.0] # Trunk
    - [0.0, 1.0, 0.0] # Spur / Cane / Shoot
    - [0.0, 0.0, 1.0] # Node
    - [1.0, 1.0, 0.0] # Wire
    - [0.0, 1.0, 1.0] # Post

# Training dataset...
train_dataset:
  _target_: smart_tree.dataset.dataset.Dataset
  mode: train
  directory: ${directory}
  json_path: ${json_path}
  cache: True
  augmentation:
    _target_: smart_tree.dataset.augmentations.AugmentationPipeline
    augmentations:
      - _target_: smart_tree.dataset.augmentations.LabelDropout
        probability: ${loss_mask_probability}
      - _target_: smart_tree.dataset.augmentations.DualAugmentation
        augmentations1:
        - _target_: smart_tree.dataset.augmentations.RandomDropout
          probability: 0.01
        augmentations2:
        - _target_: smart_tree.dataset.augmentations.Scale
          min_scale: 0.9
          max_scale: 1.1


  transform:
    _target_ : smart_tree.model.sparse.transform.sparse_voxelize_clouds
    _partial_ : True
    input_feature_names: ${input_feature_names}
    target_feature_names: ${target_feature_names}
    voxel_size: ${voxel_size}


train_data_loader:
  _target_: torch.utils.data.DataLoader
  batch_size: ${batch_size}
  drop_last: True
  pin_memory: False
  num_workers: 0
  shuffle: False

  sampler:
    _target_: torch.utils.data.RandomSampler
    replacement: True
    num_samples: 1024
    data_source: ${train_dataset}

  collate_fn:
    _target_: smart_tree.model.sparse.util.batch_collate_dual_clouds
    _partial_: True
    fp_16: ${fp16}


  dataset: ${train_dataset}

# Val dataset
validation_dataset:
  _target_: smart_tree.dataset.dataset.Dataset
  mode: validation
  directory: ${directory}
  json_path: ${json_path}
  cache: True
  transform:
    _target_ : smart_tree.model.sparse.transform.sparse_voxelize
    _partial_ : True
    input_feature_names: ${input_feature_names}
    target_feature_names: ${target_feature_names}
    voxel_size: ${voxel_size}


validation_data_loader:
  _target_: torch.utils.data.DataLoader
  batch_size: ${batch_size}
  drop_last: True
  pin_memory: False
  num_workers: 0
  shuffle: False
  collate_fn:
    _target_: smart_tree.model.sparse.util.batch_collate
    _partial_: True
    fp_16: ${fp16}



  dataset: ${validation_dataset}

# Test dataset
test_dataset:
  _target_: smart_tree.dataset.dataset.Dataset
  mode: test
  directory: ${directory}
  json_path: ${json_path}
  cache: True
  transform:
    _target_ : smart_tree.model.sparse.transform.sparse_voxelize
    _partial_ : True
    input_feature_names: ${input_feature_names}
    target_feature_names: ${target_feature_names}
    voxel_size: ${voxel_size}


test_data_loader:
  _target_: torch.utils.data.DataLoader
  batch_size: ${batch_size}
  drop_last: True
  pin_memory: False
  num_workers: 0
  shuffle: False
  collate_fn:
    _target_: smart_tree.model.sparse.util.batch_collate
    _partial_: True
    fp_16: ${fp16}


  dataset: ${test_dataset}

model:
  _target_: smart_tree.model.sparse.model.Smart_Tree_Self_Consistency
  input_channels: 3
  unet_planes: [8, 16, 32, 64, 128]
  mlp_layers: 2
  num_classes: 5
  target_features: ${target_feature_names}


optimizer:
  _target_: torch.optim.Adam
  lr: ${lr}

scheduler:
  _target_: torch.optim.lr_scheduler.ReduceLROnPlateau
  mode: "min"

training_tracker:
  _target_: smart_tree.model.tracker.SegmentationTracker

test_tracker:
  _target_: smart_tree.model.tracker.SegmentationTracker